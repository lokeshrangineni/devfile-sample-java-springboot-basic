apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-event: '[push]'
    pipelinesascode.tekton.dev/on-target-branch: '[main]'
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: loki-sample-ci-cd-crda
    appstudio.openshift.io/component: devfile-sample-java-springboot-basic-uv6x
    pipelines.appstudio.openshift.io/type: build
  name: devfile-sample-java-springboot-basic-uv6x-on-push
  namespace: lrangine-tenant
spec:
  params:
  - name: dockerfile
    value: docker/Dockerfile
  - name: git-url
    value: '{{repo_url}}'
  - name: output-image
    value: quay.io/redhat-appstudio/user-workload:{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  - name: crda-scan-image
    value: quay.io/lrangine/crda-maven:3.0
  - name: manifest-file-path
    value: pom.xml
  - name: output-file-path
    value: redhat-codeready-dependency-analysis-report.json
  - name: pkg-installation-directory-path
    value: application-package  
  pipelineSpec:
    finally:
    - name: show-summary
      params:
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: git-url
        value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
      - name: image-url
        value: $(params.output-image)
      - name: build-task-status
        value: $(tasks.build-container.status)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.1@sha256:9e21e57456c026c15765db23b986e47fc1394fa5d4823d3038b697971dd1a2bd
        name: summary
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: The path to your source code
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile
      name: dockerfile
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: "false"
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Java build
      name: java
      type: string
    - default: ""
      description: Snyk Token Secret Name
      name: snyk-secret
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: ""
      name: JAVA_COMMUNITY_DEPENDENCIES
      value: $(tasks.build-container.results.JAVA_COMMUNITY_DEPENDENCIES)
    - description: ""
      name: CLAIR_SCAN_RESULT
      value: $(tasks.loki-crda-scan-repo.results.CLAIR_SCAN_RESULT)
    tasks:
    - name: init
      params:
      - name: image-url
        value: $(params.output-image)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: pipelinerun-uid
        value: $(context.pipelineRun.uid)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-init:0.1@sha256:8c06b307b7f74622503b80ff0b81ffda63129959f52f8ed8f753d8ab98f38411
        name: init
    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      runAfter:
      - init
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-git-clone:0.1@sha256:458f4853a01c3273bd76076ac1b015d5f901e70fb4b776f788b577adb25bf5f8
        name: git-clone
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: output
        workspace: workspace
      - name: basic-auth
        workspace: git-auth
    - name: loki-crda-scan-repo
      description: Scans for static code vulneribilities by CRDA.
      taskSpec:
        results:
        - name: CLAIR_SCAN_RESULT
          description: CRDA scan result
        - name: HACBS_TEST_OUTPUT
          description: CRDA scan test output
        workspaces:
          - name: source
        steps:
          - name: run-redhat-crda-scan-step
            image: quay.io/lrangine/crda-maven:3.0
            env:
              - name: AUTH_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: loki-crda-secrets
                    key: AUTH_TOKEN
              - name: CRDA_KEY
                valueFrom:
                  secretKeyRef:
                    name: loki-crda-secrets
                    key: CRDA_KEY
              - name: HOST
                valueFrom:
                  secretKeyRef:
                    name: loki-crda-secrets
                    key: HOST
              - name: ENVIRONMENT_VARIABLE1
                value: /workspace
              - name: ENVIRONMENT_VARIABLE2
                valueFrom:
                  secretKeyRef:
                    name: loki-crda-secrets
                    key: CRDA_KEY
            script: |
              #!/usr/bin/env bash
              . /utils.sh

              echo 'Configuring the CRDA configuration.'
              export consent_telemetry="false"
              env
              mkdir -p $HOME/.crda
              touch $HOME/.crda/config.yaml
              echo auth_token: ${AUTH_TOKEN} >> $HOME/.crda/config.yaml
              echo crda_key: ${CRDA_KEY} >> $HOME/.crda/config.yaml
              echo consent_telemetry: ${CONSENT_TELEMETRY} >> $HOME/.crda/config.yaml
              echo host: ${HOST} >> $HOME/.crda/config.yaml
              crda config set consent_telemetry false
              crda config get
              echo 'trying to invoke the crda directly'
              result=$(crda analyse /workspace/source/pom.xml -j)
              exit_code=$?
              printf "RedHat CodeReady Dependency Analysis task is being executed.\n"
              printf "=%.0s" {1..50}
              printf "\nRedHat CodeReady Dependency Analysis Report\n"
              printf "=%.0s" {1..50}
              printf "\n"
              printf "Total Scanned Dependencies            :  %s \n" $(jq -r .total_scanned_dependencies <<< $result)
              printf "Total Scanned Transitive Dependencies :  %s \n" $(jq -r .total_scanned_transitives <<< $result)
              printf "Total Vulnerabilities                 :  %s \n" $(jq -r .total_vulnerabilities <<< $result)
              printf "Direct Vulnerable Dependencies        :  %s \n" $(jq -r .direct_vulnerable_dependencies <<< $result)
              printf "Publicly Available Vulnerabilities    :  %s \n" $(jq -r .publicly_available_vulnerabilities <<< $result)
              printf "Vulnerabilities Unique to Snyk        :  %s \n" $(jq -r .vulnerabilities_unique_to_synk <<< $result)
              printf "Critical Vulnerabilities              :  %s \n" $(jq -r .critical_vulnerabilities <<< $result)
              printf "High Vulnerabilities                  :  %s \n" $(jq -r .high_vulnerabilities <<< $result)
              printf "Medium Vulnerabilities                :  %s \n" $(jq -r .medium_vulnerabilities <<< $result)
              printf "Low Vulnerabilities                   :  %s \n" $(jq -r .low_vulnerabilities <<< $result)
              printf "=%.0s" {1..50}
              printf "\n\nOpen this link to see detailed report:\n%s \n\n" $(jq -r .report_link <<< $result)

              # Save report along with exit code into output file.
              jq -n {} | \
              jq --argjson result "$result" '. + {report: $result}' | \
              jq --arg exit_code "$exit_code" '. + {exit_code: $exit_code}' > \
              /workspace/source/crda_scan_output.json

              echo 'test is completed'
              echo 'preparing the reports'
              jq -rce \
              '{vulnerabilities:{
              critical: (.report."critical_vulnerabilities"),
              high: (.report."high_vulnerabilities"),
              medium: (.report."medium_vulnerabilities"),
              low: (.report."low_vulnerabilities")
              }}' /workspace/source/crda_scan_output.json | tee $(results.CLAIR_SCAN_RESULT.path)

              echo 'Printing /workspace/source/crda_scan_output.json'
              more /workspace/source/crda_scan_output.json

              note="Task $(context.task.name) completed: Refer to Tekton task result CLAIR_SCAN_RESULT for vulnerabilities scanned by CRDA."
              HACBS_TEST_OUTPUT=$(make_result_json -r "SUCCESS" -t "$note")
              echo "${HACBS_TEST_OUTPUT}" | tee $(results.HACBS_TEST_OUTPUT.path)
      runAfter:
        - clone-repository
      workspaces:
      - name: source
        workspace: workspace
    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      runAfter:
      - clone-repository
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-prefetch-dependencies:0.1@sha256:609f5c2a0d72dddb193a0fc2aef2390601172d09f093deadfb9827e28e8dea30
        name: prefetch-dependencies
      when:
      - input: $(params.hermetic)
        operator: in
        values:
        - "true"
      workspaces:
      - name: source
        workspace: workspace
    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name: CONTEXT
        value: $(params.path-context)
      - name: DOCKER_AUTH
        value: $(tasks.init.results.container-registry-secret)
      - name: HERMETIC
        value: $(params.hermetic)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)
      runAfter:
      - prefetch-dependencies
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-buildah:0.1@sha256:f4c4c211a7b8c859fb23d9b01faaf1a995a33b243476a617370e35f6438096e0
        name: buildah
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: source
        workspace: workspace
    - name: inspect-image
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: DOCKER_AUTH
        value: $(tasks.init.results.container-registry-secret)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-inspect-image:0.1@sha256:5531128863a2ac4129680d8bc5ed8ea20960c6f3a3731a561feb47afb7db8fcb
        name: inspect-image
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: source
        workspace: workspace
    - name: label-check
      runAfter:
      - inspect-image
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:2cabc7f183c5f089b827a5ac2450fef80be325480fbd2fb322ddb1e0feeb5f7d
        name: label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: workspace
        workspace: workspace
    - name: optional-label-check
      params:
      - name: POLICY_NAMESPACE
        value: optional_checks
      runAfter:
      - inspect-image
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-label-check:0.1@sha256:2cabc7f183c5f089b827a5ac2450fef80be325480fbd2fb322ddb1e0feeb5f7d
        name: label-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: workspace
        workspace: workspace
    - name: deprecated-base-image-check
      params:
      - name: BASE_IMAGES_DIGESTS
        value: $(tasks.build-container.results.BASE_IMAGES_DIGESTS)
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.1@sha256:bf1a1cad85bb896e920f0f7ff5dda2f885b76f2617934f72e7954565cd50df49
        name: deprecated-image-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      workspaces:
      - name: test-ws
        workspace: workspace
    - name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: docker-auth
        value: $(tasks.init.results.container-registry-secret)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-clair-scan:0.1@sha256:1b4951e91fdfb3188d459d0abac411a6364da5cb135e81fb4a84bbd782bb545d
        name: clair-scan
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sast-snyk-check
      params:
      - name: SNYK_SECRET
        value: $(params.snyk-secret)
      runAfter:
      - clone-repository
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-sast-snyk-check:0.1@sha256:58f288a86ae7e1a2fff416d11720521effcf8e9b410355080a2b8a9bb8ae587c
        name: sast-snyk-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
      - input: $(params.snyk-secret)
        operator: notin
        values:
        - ""
      workspaces:
      - name: workspace
        workspace: workspace
    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: docker-auth
        value: $(tasks.init.results.container-registry-secret)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-clamav-scan:0.1@sha256:2c8dbe8aa7c0fa126a9c84e7590c4e901bcfeec6dde4ccbffda4c493cefb43ed
        name: clamav-scan
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sbom-json-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        bundle: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.1@sha256:9a232f343d6397bfaf9620b6e63ce6943e256ad30da93cf8e9de3ca63ada7717
        name: sbom-json-check
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    workspaces:
    - name: workspace
    - name: git-auth
      optional: true
  workspaces:
  - name: workspace
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
